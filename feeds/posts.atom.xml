<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tpwo.github.io - posts</title><link href="https://tpwo.github.io/" rel="alternate"></link><link href="https://tpwo.github.io/feeds/posts.atom.xml" rel="self"></link><id>https://tpwo.github.io/</id><updated>2025-05-30T22:56:00+02:00</updated><subtitle>A personal blog</subtitle><entry><title>Convert dvdsub into srt subtitles</title><link href="https://tpwo.github.io/blog/2025/05/30/convert-dvdsub-into-srt-subtitles" rel="alternate"></link><published>2025-05-30T22:56:00+02:00</published><updated>2025-05-30T22:56:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2025-05-30:/blog/2025/05/30/convert-dvdsub-into-srt-subtitles</id><summary type="html">How to convert bitmap subtitles into text format</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I wanted to extract subtitles from a bunch of &lt;code&gt;.mp4&lt;/code&gt; files,
as they were containing song names playing in the background of the movie.&lt;/p&gt;
&lt;p&gt;This was more complicated than I thought.&lt;/p&gt;
&lt;p&gt;It turns out video subtitles can come in very different formats.
One of them is &lt;code&gt;dvdsub&lt;/code&gt;, and it&amp;#8217;s a bitmap subtitle format.&lt;/p&gt;
&lt;p&gt;To convert it into something you can grep,
you have to go through a lot of steps including OCR.&lt;/p&gt;
&lt;p&gt;Fortunately, good people created tools to do just that.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_ffmpeg_for_the_win"&gt;ffmpeg for the win&lt;/h2&gt;&lt;p&gt;I loved &lt;code&gt;ffmpeg&lt;/code&gt; once I discovered it many years ago.
I really don&amp;#8217;t like bloated constrained GUI-based apps
to manipulate video and audio files.&lt;/p&gt;
&lt;p&gt;It can help with subtitles as well.&lt;/p&gt;
&lt;p&gt;To install on MacOS you can use homebrew:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew install ffmpeg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Linux it should be available in your package manager.
On Windows probably the best solution is to use
&lt;a href="https://learn.microsoft.com/en-us/windows/wsl/install"&gt;WSL2&lt;/a&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_check_your_subs"&gt;Check your subs&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; can help you verifying that your subs are actually in &lt;code&gt;dvdsub&lt;/code&gt; format.
Use &lt;code&gt;-i&lt;/code&gt; and point to the video file:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ffmpeg -i &amp;lt;video-file&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;ffmpeg -i video.mp4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output should look like this:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;&amp;lt;...snip...&amp;gt;
Stream #0:0[0x1](eng): Video: mpeg4 (Simple Profile) (mp4v / 0x7634706D), yuv420p, 448x336 [SAR 1:1 DAR 4:3], 825 kb/s, 29.97 fps, 29.97 tbr, 30k tbn (default)
      Metadata:
        creation_time   : 2007-09-27T17:47:49.000000Z
        handler_name    : Video Media Handler
        vendor_id       : [0][0][0][0]
  Stream #0:1[0x2](eng): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 74 kb/s (default)
      Metadata:
        creation_time   : 2007-09-27T17:47:49.000000Z
        handler_name    : Sound Media Handler
        vendor_id       : [0][0][0][0]
  Stream #0:2[0x3](eng): Subtitle: dvd_subtitle (dvdsub) (mp4s / 0x7334706D), 720x480, 0 kb/s (default)
      Metadata:
        creation_time   : 2007-09-27T17:47:57.000000Z
        handler_name    : Unspecified
At least one output file must be specified&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The part we&amp;#8217;re interested in is
&lt;code&gt;Subtitle: dvd_subtitle (dvdsub)&lt;/code&gt;.
This confirms that our subtitles are bitmap-based,
and are one of the three streams in the file.&lt;/p&gt;
&lt;p&gt;Indexing is 0-based with a number after &lt;code&gt;Stream #&lt;/code&gt;,
i.e. &lt;code&gt;0:2&lt;/code&gt; in case of subtitle stream.&lt;/p&gt;
&lt;p&gt;Stream index is required in the next step.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_extract_subs_into_separate_container"&gt;Extract subs into separate container&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; comes in handy again:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ffmpeg -i &amp;lt;video-file&amp;gt; -map &amp;lt;stream-index&amp;gt; -c:s copy &amp;lt;output-file&amp;gt;.mkv&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ffmpeg -i video.mp4 -map 0:2 -c:s copy output.mkv&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_convert_mkv_into_sub_and_idx_files"&gt;Convert &lt;code&gt;mkv&lt;/code&gt; into &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;idx&lt;/code&gt; files&lt;/h2&gt;&lt;p&gt;This step requires mkvextract.
Again, you can install it with homebrew:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew install mkvtoolnix&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;code&gt;mkvextract&lt;/code&gt; should be available.
You can use it to create &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;idx&lt;/code&gt; file from &lt;code&gt;mkv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;mkvextract tracks &amp;lt;output-file&amp;gt;.mkv 0:&amp;lt;output-file&amp;gt;.sub&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;mkvextract tracks output.mkv 0:output.sub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We do it because OCR tools support this format instead of &lt;code&gt;mkv&lt;/code&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_use_ocr_to_get_srt_file"&gt;Use OCR to get &lt;code&gt;srt&lt;/code&gt; file&lt;/h2&gt;&lt;p&gt;This step took me the most, as the tool we&amp;#8217;re using here is pretty old,
and I had to manually clone repo and tweak it to be able to compile it.&lt;/p&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_install_vobsub2srt"&gt;Install &lt;code&gt;VobSub2SRT&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;You can use my fork, so you don&amp;#8217;t have to apply the fix by yourself.
The "fix" was bumping the minimum required version of &lt;code&gt;cmake&lt;/code&gt; which I did in
&lt;a href="https://github.com/tpwo/VobSub2SRT/commit/cd391e43cfc13df9fc54a58246664bb3c42b481a"&gt;this one-liner&lt;/a&gt;.&lt;/p&gt;
&lt;section class="doc-section level-3"&gt;&lt;h4 id="_use_my_homebrew_tap"&gt;Use my homebrew tap&lt;/h4&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;Remember that you probably shouldn&amp;#8217;t just trust me
and run these commands below without checking the source code first ðŸ˜‰&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;I was able to set up a private homebrew tap,
so it&amp;#8217;s possible to install my fixed version with these two commands.
Homebrew will take care of build dependencies
(or at least for &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;tesseract&lt;/code&gt;):&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew tap tpwo/vobsub2srt
brew install --HEAD tpwo/vobsub2srt/vobsub2srt&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setting this up was new for me.
It turns out that Homebrew requires
&lt;code&gt;&amp;lt;user&amp;gt;/homebrew-&amp;lt;name&amp;gt;&lt;/code&gt; repo to be present,
so I &lt;a href="https://github.com/tpwo/homebrew-vobsub2srt"&gt;created it&lt;/a&gt;.
This repo contains the
&lt;a href="https://github.com/tpwo/homebrew-vobsub2srt/blob/main/Formula/vobsub2srt.rb"&gt;formula&lt;/a&gt;
to install VobSub2SRT
from &lt;a href="https://github.com/tpwo/VobSub2SRT"&gt;my fork&lt;/a&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-3"&gt;&lt;h4 id="_manual_installation"&gt;Manual installation&lt;/h4&gt;&lt;p&gt;If you prefer manual installation, it&amp;#8217;s also possible.
Before compilation, you have to install build dependencies:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew install cmake
brew install tesseract&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can clone my fork and compile the tool:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="bash"&gt;git clone https://github.com/tpwo/VobSub2SRT
&lt;span class="nb"&gt;cd &lt;/span&gt;VobSub2SRT

&lt;span class="c"&gt;# Then you can follow original README&lt;/span&gt;
./configure
make

&lt;span class="c"&gt;# `vobsub2srt` should be present in `build/bin`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Original README suggests &lt;code&gt;sudo make install&lt;/code&gt;,
but I just grabbed the compiled binary and moved it to my PATH in &lt;code&gt;~/.local/bin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then you can finally convert &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;idx&lt;/code&gt; file into &lt;code&gt;srt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;# Note we don't pass file extension here
vobsub2srt &amp;lt;output-file&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;vobsub2srt output&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_script_to_run_it_all_with_one_command"&gt;Script to run it all with one command&lt;/h2&gt;&lt;p&gt;I had a bunch videos with embedded subtitles,
so I created a Bash script to quickly run it with &lt;code&gt;for f in *&lt;/code&gt;:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="bash"&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;title_wo_suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nv"&gt;outdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;music

&lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;ffmpeg &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 2&amp;gt;&amp;amp;1 | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'dvdsub'&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt; &lt;span class="s1"&gt;'[#\[]'&lt;/span&gt; &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$stream&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'No subtitles track in the video!'&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi

&lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

ffmpeg &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-map&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$stream&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;:s copy &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;.mkv

mkvextract tracks &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;.mkv 0:&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;.sub

vobsub2srt &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run it, save it under &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;,
do &lt;code&gt;chmod +x &amp;lt;name&amp;gt;&lt;/code&gt;,
and run:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;./&amp;lt;name&amp;gt; &amp;lt;video-file&amp;gt;.&amp;lt;ext&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;./extract-subs video.mp4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To run it for e.g. all &lt;code&gt;.mp4&lt;/code&gt; files in the current folder do:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;for f in *.mp4; do ./extract-subs.sh "$f"; done&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_sources_and_further_reading"&gt;Sources and further reading&lt;/h2&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;Original VobSub2SRT repo (I forked a fork!):&lt;br&gt;
&lt;a class="bare" href="https://github.com/ruediger/VobSub2SRT"&gt;https://github.com/ruediger/VobSub2SRT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Tutorial describing alternative flow with &lt;code&gt;ffmes&lt;/code&gt;. I figured VobSub2SRT is easier to run on Apple Sillcon Macbook:&lt;br&gt;
&lt;a class="bare" href="https://subarashii-no-fansub.github.io/Subbing-Tutorial/Convert-vobsub-file-into-srt/"&gt;https://subarashii-no-fansub.github.io/Subbing-Tutorial/Convert-vobsub-file-into-srt/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="video"></category></entry><entry><title>Use SSH key to sign your Git commits</title><link href="https://tpwo.github.io/blog/2025/05/30/use-ssh-key-to-sign-your-git-commits" rel="alternate"></link><published>2025-05-30T21:33:00+02:00</published><updated>2025-05-30T21:33:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2025-05-30:/blog/2025/05/30/use-ssh-key-to-sign-your-git-commits</id><summary type="html">How to sign commits without using GPG</summary><content type="html">&lt;section class="doc-section level-1"&gt;&lt;h2 id="_but_why"&gt;But why?&lt;/h2&gt;&lt;p&gt;You might wonder why should you sign your commits.
This is a valid question, and some people just don&amp;#8217;t care about it.
If you don&amp;#8217;t have a ready opinion&lt;a class="footnote-ref" id="_footnoteref_1" href="#_footnote_1" title="View footnote 1" role="doc-noteref"&gt;[1]&lt;/a&gt;, I&amp;#8217;ll try to convince you.&lt;/p&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_choose_your_warrior_committer"&gt;Choose your &lt;s&gt;warrior&lt;/s&gt; committer&lt;/h3&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;Yes, I know that author and committer are two different things in Git,
but you can fabricate both of them pretty much the same way.&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;In Git you can assign any author to any commit.
This is a basic functionality of Git,
you can put any name and email in &lt;code&gt;.gitconfig&lt;/code&gt;
or pass one-time name/email with &lt;code&gt;-C&lt;/code&gt; when committing
(or set ENV variables etc.&amp;#8201;&amp;#8211;&amp;#8201;there are many ways).&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_make_github_to_link_their_profile"&gt;Make GitHub to link their profile&lt;/h3&gt;&lt;p&gt;Then, you can push this commit to GitHub.
If the commit email address is already used by someone on GitHub,
GitHub links it with their profile.
Even if this is obviously not their commit.
GitHub cannot know this.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_fork_their_repo_and_display_fabricated_commit_from_the_base_url"&gt;Fork their repo and display fabricated commit from the base URL&lt;/h3&gt;&lt;p&gt;You might think that no one cares about you
doing some fake commits in your repos.
But you can fork any repo and fake commits in the fork.&lt;/p&gt;
&lt;p&gt;Then, you can display a commit from fork
even when looking at it from the original repo.
Actually, this is a big problem with GitHub UI,
as it treats all forks to be connected with the base repo.&lt;/p&gt;
&lt;p&gt;I once found a fabricated Linus Torvalds commit
in which he deleted the whole
&lt;a href="https://github.com/torvalds/linux"&gt;Linux codebase&lt;/a&gt;
with a funny commit message.&lt;/p&gt;
&lt;p&gt;Unfortunately, I haven&amp;#8217;t found it now but
&lt;a href="https://github.com/Amog-OS/AmogOS/commit/4f503a0"&gt;here&amp;#8217;s something similar&lt;/a&gt;
(also from Torvalds!).&lt;/p&gt;
&lt;p&gt;TLDR: fabrication process is simple:&lt;/p&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;&lt;li&gt;Fork a repo&lt;/li&gt;&lt;li&gt;Create a fake commit.&lt;/li&gt;&lt;li&gt;Display it in context of the original repo. &lt;strong&gt;GitHub allows for that!&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_what_can_i_do"&gt;What can I do?&lt;/h3&gt;&lt;p&gt;You cannot prevent people from using your (public) email
and fabricate commits on your account.
But you can turn on GitHub &lt;strong&gt;vigilant mode&lt;/strong&gt; which is described in
&lt;a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/displaying-verification-statuses-for-all-of-your-commits"&gt;their docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then all of your unsigned commits will be marked explicitly as unverified.
Unfortunately, also all of &lt;strong&gt;your own&lt;/strong&gt; commits,
prior you started to sign them, will be marked as well.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_old_times"&gt;Old times&lt;/h2&gt;&lt;p&gt;Nevermind, let&amp;#8217;s go back to the original topic.&lt;/p&gt;
&lt;p&gt;By the end of 2021 with v2.34.0
Git added a way to sign your commits using SSH keys.
Before then, only GPG could be used for that,
and using GPG is a lot of pain.&lt;/p&gt;
&lt;p&gt;I tried switching to SSH a few years ago but it didn&amp;#8217;t work,
and quick research showed that I&amp;#8217;m not the only one.&lt;/p&gt;
&lt;p&gt;Out of curiosity I checked it now,
and I was able to sign my commits after a few minutes of configuration.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_configure_git"&gt;Configure Git&lt;/h2&gt;&lt;p&gt;I assume that you already have and use a password-protected SSH key&lt;a class="footnote-ref" id="_footnoteref_2" href="#_footnote_2" title="View footnote 2" role="doc-noteref"&gt;[2]&lt;/a&gt;.
Then you can tell Git to use it:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global gpg.format ssh
git config --global user.signingkey ~/.ssh/&amp;lt;your-public-key&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;#8217;s all!
To sign a single commit:&lt;/p&gt;
&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;while doing research you might also encounter sign-off
which is a different thing in Git, and is not backed by by any encryption&lt;a class="footnote-ref" id="_footnoteref_3" href="#_footnote_3" title="View footnote 3" role="doc-noteref"&gt;[3]&lt;/a&gt;.&lt;/p&gt;&lt;/aside&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git commit -S -m 'Your commit message'&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To always sign your commits:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global commit.gpgsign true&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To also always sign your tags:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global tag.gpgsign true&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_configure_github"&gt;Configure GitHub&lt;/h2&gt;&lt;p&gt;To have commits marked as signed in GitHub,
you have to add SSH key one more time,
and choose it to be your &lt;strong&gt;Signing Key&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/use-ssh-key-to-sign-your-git-commits/add-new-ssh-key.png" alt="Add new SSH signing key in GitHub"&gt;&lt;/div&gt;
&lt;p&gt;After doing that,
your signed commits will be marked as &lt;strong&gt;Verified&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/use-ssh-key-to-sign-your-git-commits/commit-sign.png" alt="Commit signed with SSH key as displayed in GitHub"&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_local_signers_file"&gt;Local signers file&lt;/h2&gt;&lt;p&gt;You can also create an allowed signers file
for quick local verification of signatures&lt;/p&gt;
&lt;p&gt;Create a file (e.g., &lt;code&gt;~/.config/git/allowed_signers&lt;/code&gt;)
listing trusted email and public key pairs in this format:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;your.email@example.com ssh-ed25519 AAAAC3NzaC1...&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then tell Git to use it:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global gpg.ssh.allowedSignersFile '~/.config/git/allowed_signers'&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now verify if your commit was signed properly:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;$ git verify-commit &amp;lt;hash&amp;gt;
Good "git" signature for your.email@example.com with ED25519 key SHA256:&amp;lt;...snip...&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can do it for git log as well:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;$ git log --show-signature
commit &amp;lt;hash&amp;gt; (HEAD -&amp;gt; main, origin/main)
Good "git" signature for your.email@example.com with ED25519 key SHA256:&amp;lt;...snip...&amp;gt;
Author: John Doe &amp;lt;your.email@example.com&amp;gt;
Date:   Fri May 30 21:22:36 2025 +0200

    Hello there&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_further_reading"&gt;Further reading&lt;/h2&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;How to do it on Windows:&lt;br&gt;
&lt;a class="bare" href="https://www.meziantou.net/signing-commits-in-git-using-ssh-keys-on-windows.htm"&gt;https://www.meziantou.net/signing-commits-in-git-using-ssh-keys-on-windows.htm&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/section&gt;&lt;section class="footnotes" aria-label="Footnotes" role="doc-endnotes"&gt;&lt;hr&gt;&lt;ol class="footnotes"&gt;&lt;li class="footnote" id="_footnote_1" role="doc-endnote"&gt;I don&amp;#8217;t want to go into details, but e.g. &lt;a href="https://withblue.ink/2020/05/17/how-and-why-to-sign-git-commits.html"&gt;this blog post&lt;/a&gt; does it ery well &lt;a class="footnote-backref" href="#_footnoteref_1" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_2" role="doc-endnote"&gt;If you don&amp;#8217;t have your SSH key set up, &lt;a href="https://www.git-tower.com/blog/setting-up-ssh-for-commit-signing"&gt;this blog post&lt;/a&gt; will be helpful. They go into much more details along with tips how to load SSH keys into keychain on MacOS etc. &lt;a class="footnote-backref" href="#_footnoteref_2" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_3" role="doc-endnote"&gt;&lt;a href="https://youtu.be/6hu3cbBhHqQ"&gt;This video&lt;/a&gt; shows different ways to sign a Git commit. Also, author clearly states that he doesn&amp;#8217;t sign his commits, so you clearly see that opinions vary on this topic. &lt;a class="footnote-backref" href="#_footnoteref_3" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="git"></category></entry><entry><title>Clipboard sync between WSL Neovim and Windows</title><link href="https://tpwo.github.io/blog/2024/09/17/clipboard-sync-between-wsl-neovim-and-windows" rel="alternate"></link><published>2024-09-17T21:52:00+02:00</published><updated>2024-09-17T21:52:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-09-17:/blog/2024/09/17/clipboard-sync-between-wsl-neovim-and-windows</id><summary type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I recently started migration from Vim to Neovim.
One of the first issues was proper configuration of clipboard.
By &lt;em&gt;proper â€¦&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I recently started migration from Vim to Neovim.
One of the first issues was proper configuration of clipboard.
By &lt;em&gt;proper&lt;/em&gt;, I mean a situation
where I have a working 2-way-sync clipboard
between Neovim running in tmux in WSL in Windows Terminal and Windows,
so I can easily copy and paste
from my browser or any other program to and from Neovim.&lt;/p&gt;
&lt;p&gt;With Vim I intially achieved that with &lt;a href="https://github.com/Opticos/GWSL-Source"&gt;GWSL&lt;/a&gt;
and configured &lt;code&gt;$DISPLAY&lt;/code&gt; env variable
which was a quite complex and unstable solution
(GWSL sometimes has weird issues).
Thankfully, it was needed only on older versions of Windows 10
(my &lt;code&gt;$CURRENT_COMPANY&lt;/code&gt; still uses the old Win10 version though&amp;#8230;&amp;#8203;).
Up-to-date Windows 10 and Windows 11
support clipboard sync for Vim out of the box.
They have something like GWSL built-in,
and surprisingly it&amp;#8217;s quite stable and just works.
Bravo Microsoft ðŸ˜›&lt;/p&gt;
&lt;p&gt;The only caveat is to install Vim version which has clipboard support&amp;#8201;&amp;#8211;&amp;#8201;usually &lt;code&gt;vim-gtk&lt;/code&gt; is recommended on Debian/Ubuntu.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_the_unexpected"&gt;The unexpected&lt;/h2&gt;&lt;p&gt;I was a bit surprised to find out
that this doesn&amp;#8217;t work with Neovim.&lt;/p&gt;
&lt;p&gt;Some googling brought the solution: &lt;code&gt;win32yank&lt;/code&gt;.
This is a small Rust program
which integrates with Windows cliboard,
providing an interface which can be easily used by Neovim.&lt;/p&gt;
&lt;p&gt;Actually, Neovim has built-in support for it.
You just need to make sure that &lt;code&gt;win32yank.exe&lt;/code&gt; is on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_how_to_get_win32yank_exe"&gt;How to get &lt;code&gt;win32yank.exe&lt;/code&gt;?&lt;/h2&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;If, from any reason, you don&amp;#8217;t want Neovim on Windows,
you can download only the &lt;code&gt;win32yank.exe&lt;/code&gt; file.
E.g. by doing &lt;code&gt;winget install win32yank&lt;/code&gt;.
Just make sure to use the correct path to the &lt;code&gt;exe&lt;/code&gt; file.&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;I use WSL to do most of my text editting,
but I still find it useful to have the same editor on Windows itself.&lt;/p&gt;
&lt;p&gt;You can install it most easily with
&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/winget/"&gt;winget&lt;/a&gt;,
i.e. &lt;code&gt;winget install Neovim.Neovim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why this it important?
It turns out that Neovim on Windows is shipped with &lt;code&gt;win32yank&lt;/code&gt;!&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_creating_symlink"&gt;Creating symlink&lt;/h2&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;I noticed that Neovim has issues
if I copy the Windows exectuable directly to WSL drive.
That&amp;#8217;s why you probably should create a symlink,
even if you download only the binary.&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;&lt;code&gt;winget&lt;/code&gt; installs Neovim in &lt;code&gt;Program Files&lt;/code&gt;,
and &lt;code&gt;win32yank.exe&lt;/code&gt; is located in the &lt;code&gt;bin&lt;/code&gt; subfolder.
Use this command to create a symlink in your home folder,
so Neovim can see it.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ln --symbolic /mnt/c/Program\ Files/Neovim/bin/win32yank.exe ~/.local/bin/win32yank.exe&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, &lt;code&gt;~/.local/bin&lt;/code&gt; has to exist
and be in your &lt;code&gt;$PATH&lt;/code&gt; for this to work.&lt;/p&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="tips"></category><category term="vim"></category><category term="wsl"></category><category term="windows"></category></entry><entry><title>Playing Super Mario World in 2024</title><link href="https://tpwo.github.io/blog/2024/08/12/playing-super-mario-world-in-2024" rel="alternate"></link><published>2024-08-12T23:12:00+02:00</published><updated>2024-08-12T23:12:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-08-12:/blog/2024/08/12/playing-super-mario-world-in-2024</id><summary type="html">How to run it on modern platforms in widescreen mode</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;div class="quote-block"&gt;&lt;blockquote&gt;&lt;p&gt;Thank you Mario! But our princess is in another castle!&lt;/p&gt;&lt;footer&gt;&amp;#8212; &lt;cite&gt;&lt;a href="https://en.wikipedia.org/wiki/Our_princess_is_in_another_castle!"&gt;Toad&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Super_Mario_World"&gt;Super Mario World&lt;/a&gt;
is one of my childhood games I remember really well.
It was released in 1990 but recently I found out
that we can still play it today on modern platforms
with widescreen support enabled!&lt;/p&gt;
&lt;figure class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/cover.png" alt="Super Mario World Cover"&gt;
&lt;figcaption&gt;Cover of the US version of Super Mario World&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The base to do it is
&lt;a href="https://github.com/bsnes-emu/bsnes"&gt;bsnes&lt;/a&gt;,
a multi-platform SNES emulator.
There is a fork of it
which supports HD video features called
&lt;a href="https://github.com/DerKoun/bsnes-hd"&gt;bsnes-hd&lt;/a&gt;,
and we&amp;#8217;ll be using it.&lt;/p&gt;
&lt;p&gt;Super Mario World Widescreen project is a fan-made patch
which can be found in
&lt;a href="https://github.com/VitorVilela7/wide-snes"&gt;wide-snes&lt;/a&gt;
GitHub repo.&lt;/p&gt;
&lt;p&gt;We also need a patcher.
According to
&lt;a href="https://sneslab.net/wiki/How_to_apply_ROM_patches"&gt;sneslab.net manual&lt;/a&gt;
we can use either FLIPS or beam.
They host FLIPS directly on their site:
&lt;a class="bare" href="https://sneslab.net/tools/floating.zip"&gt;https://sneslab.net/tools/floating.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the only missing piece is ROM with the original game.
I found a copy of it on
&lt;a href="https://archive.org/details/super-mario-world-usa_20230925"&gt;archive.org&lt;/a&gt;
which seems to be a pretty reasonable source.
If it&amp;#8217;s there,
Nintendo probably doesn&amp;#8217;t have anything against it,
or at least no longer cares.&lt;/p&gt;
&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;Internet Archive hosts multiple files under the linked project,
but we care only about a zip which contains the &lt;code&gt;sfc&lt;/code&gt; file with the actual game.&lt;/p&gt;&lt;/aside&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_patching_the_rom"&gt;Patching the ROM&lt;/h2&gt;&lt;p&gt;After downloading the files,
you should have something like this
(we&amp;#8217;re skipping emulator for now):&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;â”œâ”€â”€ smw-widescreen.bps           &lt;b class="conum"&gt;1&lt;/b&gt;
â”œâ”€â”€ Super Mario World (USA).sfc  &lt;b class="conum"&gt;2&lt;/b&gt;
â””â”€â”€ floating
    â”œâ”€â”€ boring.zip
    â”œâ”€â”€ flips-linux
    â”œâ”€â”€ flips.exe                &lt;b class="conum"&gt;3&lt;/b&gt;
    â”œâ”€â”€ license.txt
    â””â”€â”€ src.zip&lt;/pre&gt;&lt;ol class="callout-list arabic"&gt;&lt;li&gt;Patch file&lt;/li&gt;&lt;li&gt;ROM file&lt;/li&gt;&lt;li&gt;FLIPS patcher&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Run FLIPS &amp;lt;3&amp;gt; and click &lt;code&gt;Apply Patch&lt;/code&gt;.
At first it asks you for the patch file,
then for the ROM file,
and then for the filename to save the patched ROM.&lt;/p&gt;
&lt;div class="image-block left"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/flips.png" alt="FLIPS patcher"&gt;&lt;/div&gt;
&lt;p&gt;You can notice that the patched file is twice the size of the original:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="shell"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;du&lt;/span&gt; &lt;span class="nt"&gt;-sh&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;
1.0M    Super Mario World &lt;span class="o"&gt;(&lt;/span&gt;USA&lt;span class="o"&gt;)&lt;/span&gt; Widescreen Project.sfc
512K    Super Mario World &lt;span class="o"&gt;(&lt;/span&gt;USA&lt;span class="o"&gt;)&lt;/span&gt;.sfc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_creating_widescreen_configuration_file"&gt;Creating widescreen configuration file&lt;/h2&gt;&lt;p&gt;&lt;code&gt;bsnes-hd&lt;/code&gt; requires a &lt;code&gt;bso&lt;/code&gt; configuration file
in order to correctly run the game in a widescreen mode.
Thankfully, you don&amp;#8217;t have to download it,
as the file is very short and simple,
and you can create it with this command:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="shell"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'w1s1W48S2i0o1p1b1B1c1'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Super Mario World (USA) Widescreen Project.bso'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The content of the file is taken from
&lt;a href="https://github.com/VitorVilela7/wide-snes/blob/master/smw-widescreen.bso"&gt;wide-snes GitHub repo&lt;/a&gt;.
I guess it uses special quirky syntax to tell the emulator
how it should behave when dealing with the patched ROM.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_running_the_game"&gt;Running the game&lt;/h2&gt;&lt;p&gt;Now, you can unzip &lt;code&gt;bsnes-hd&lt;/code&gt; and run it.
To make the game look better,
&lt;strong&gt;make sure to select&lt;/strong&gt; &lt;code&gt;Settings &amp;gt; Shader &amp;gt; None&lt;/code&gt;.
By default it&amp;#8217;s set to &lt;code&gt;Blur&lt;/code&gt; which makes the game very&amp;#8230;&amp;#8203; well, blurry.
You can later switch these options on the fly,
maybe you&amp;#8217;ll like it.&lt;/p&gt;
&lt;p&gt;To start the game, either select &lt;code&gt;System &amp;gt; Load Game&lt;/code&gt; or drag
and drop patched &lt;code&gt;sfc&lt;/code&gt; file into the window.
Super Mario World should start in widescreen mode!&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/gameplay.png" alt="Super Mario World in widescreen mode"&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_configuring_controller"&gt;Configuring controller&lt;/h2&gt;&lt;p&gt;I found the game to be much more enjoyable while playing it with a game pad.
Fortunately, &lt;code&gt;bsnes&lt;/code&gt; allows for that.
Select &lt;code&gt;Settings &amp;gt; Input&lt;/code&gt; to configure mappings for your device.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m using Xbox 360 controller,
and it works like a charm.
Here are my settings:&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/gamepad-mapping.png" alt="Input settings for Xbox 360 controller"&gt;&lt;/div&gt;
&lt;p&gt;These are pretty much defaults,
as much as you can tell that about SNES &amp;#8594; Xbox 360 conversion,
but I added another mapping for &lt;code&gt;X&lt;/code&gt;
which is used to run faster in the game.&lt;/p&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="gaming"></category></entry><entry><title>Hello, World!</title><link href="https://tpwo.github.io/blog/2024/06/05/hello-world" rel="alternate"></link><published>2024-06-05T23:53:00+02:00</published><updated>2024-07-15T22:51:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-06-05:/blog/2024/06/05/hello-world</id><summary type="html">&lt;p&gt;We&amp;#8217;re live!
I had an idea to create a personal blog for quite some time,
and here it is â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We&amp;#8217;re live!
I had an idea to create a personal blog for quite some time,
and here it is.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s still in a very WIP state,
as I connected all the wires to run it,
and didn&amp;#8217;t have much time to focus on
personalization, themes and other nice-to-eyes features.
But at first, I&amp;#8217;d like to add some content,
so I can see the impact of style changes on real posts.&lt;/p&gt;</content><category term="posts"></category></entry></feed>