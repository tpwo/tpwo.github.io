<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tpwo.github.io</title><link href="https://tpwo.github.io/" rel="alternate"></link><link href="https://tpwo.github.io/feeds/all.atom.xml" rel="self"></link><id>https://tpwo.github.io/</id><updated>2025-05-31T00:31:00+02:00</updated><subtitle>A personal blog</subtitle><entry><title>Useful Git settings</title><link href="https://tpwo.github.io/blog/2025/05/31/useful-git-settings" rel="alternate"></link><published>2025-05-31T00:31:00+02:00</published><updated>2025-05-31T00:31:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2025-05-31:/blog/2025/05/31/useful-git-settings</id><summary type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;In my dotfiles I always have a &lt;code&gt;.gitconfig&lt;/code&gt; file
with some of the settings preconfigured.
Without them using Git for â€¦&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;In my dotfiles I always have a &lt;code&gt;.gitconfig&lt;/code&gt; file
with some of the settings preconfigured.
Without them using Git for me would be much more cumbersome.
Here&amp;#8217;s a list of them along with some comments and sources.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_core_settings"&gt;Core settings&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_core_autocrlf"&gt;&lt;code&gt;core.autocrlf&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Line ending characters are one big mess due to backwards compatibility.
Windows systems use &lt;code&gt;CRLF&lt;/code&gt;, Unix and consequently Linux uses &lt;code&gt;LF&lt;/code&gt;.
More than that, older Macs used &lt;code&gt;CR&lt;/code&gt;,
so the only missing option was &lt;code&gt;LFCR&lt;/code&gt; ðŸ¤ .
Thankfully Apple switched to &lt;code&gt;LF&lt;/code&gt; with Mac OS X 10.0,
so we&amp;#8217;re left with two variants.&lt;a class="footnote-ref" id="_footnoteref_1" href="#_footnote_1" title="View footnote 1" role="doc-noteref"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git was created by Linus Torvalds
so it&amp;#8217;s no surprise that it prefers &lt;code&gt;LF&lt;/code&gt; by default,
and warns you if you try committing files with other line ending characters.&lt;/p&gt;
&lt;p&gt;Theoretically you can stick to e.g. &lt;code&gt;CRLF&lt;/code&gt;
if you&amp;#8217;re doing a strictly Windows project,
but I find it much easier to always commit &lt;code&gt;LF&lt;/code&gt;,
and configure Git (and my CI&lt;a class="footnote-ref" id="_footnoteref_2" href="#_footnote_2" title="View footnote 2" role="doc-noteref"&gt;[2]&lt;/a&gt;) to guarantee that.&lt;/p&gt;
&lt;p&gt;In practice, you might notice that a lot of files
in a lot of repositories in your project
were already committed with &lt;code&gt;CRLF&lt;/code&gt;. Such is life.
Because of that I don&amp;#8217;t like setting &lt;code&gt;autocrlf&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;,
as it tells Git to always convert from &lt;code&gt;CRLF&lt;/code&gt; to &lt;code&gt;LF&lt;/code&gt; when doing a commit.&lt;/p&gt;
&lt;p&gt;This is a bit annoying,
as then it shows that the whole file was modified
(which is in fact true) in the commit view,
and it makes much harder to see the actual changes.
This depends on the tool you&amp;#8217;re using
as some of them can hide line ending changes pretty well.
Still, I would advocate to isolate line ending changes from other types of changes.&lt;/p&gt;
&lt;p&gt;E.g. you might want to do a single commit in a repo
in which you clean it up for &lt;em&gt;all files&lt;/em&gt;&lt;a class="footnote-ref" id="_footnoteref_3" href="#_footnote_3" title="View footnote 3" role="doc-noteref"&gt;[3]&lt;/a&gt;,
and then add this commit to &lt;code&gt;.git-blame-ignore-revs&lt;/code&gt;,
so it doesn&amp;#8217;t makes mess with the history regardless of the tool
and/or settings you are using.&lt;/p&gt;
&lt;section class="doc-section level-3"&gt;&lt;h4 id="_tldr"&gt;TLDR&lt;/h4&gt;&lt;p&gt;My rule of thumb:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global core.autocrlf true  &lt;b class="conum"&gt;1&lt;/b&gt;
git config --global core.autocrlf input &lt;b class="conum"&gt;2&lt;/b&gt;&lt;/pre&gt;&lt;ol class="callout-list arabic"&gt;&lt;li&gt;Use that setting on Windows&lt;/li&gt;&lt;li&gt;Use that setting otherwise (Linux, Mac, WSL)&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_core_excludesfile"&gt;&lt;code&gt;core.excludesFile&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Have you noticed that due to your setup,
i.e. editor or IDE you&amp;#8217;re using,
you are the person who always adds particular entries to &lt;code&gt;.gitignore&lt;/code&gt; in all repos?
Are you tired of that?
&lt;code&gt;excludesFile&lt;/code&gt; is the solution for you.
It&amp;#8217;s a globally defined &lt;code&gt;.gitignore&lt;/code&gt;
which Git uses even if a &lt;code&gt;.gitignore&lt;/code&gt; is missing in a repo.&lt;/p&gt;
&lt;p&gt;I like to keep it in my home folder along with &lt;code&gt;.gitconfig&lt;/code&gt;,
and I use the name &lt;code&gt;.gitignore_global&lt;/code&gt;:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global core.excludesFile '~/.gitignore_global'&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_core_sshcommand"&gt;&lt;code&gt;core.sshcommand&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;I&amp;#8217;m a Windows user, but I prefer bash.
As terminal is very important in my workflow,
I use WSL both at work and in my private projects.
There are a lot of quirks about WSL
and one of them is having Git remember you SSH passwords.
There are Linux solutions for that,
and I experimented with them.
Unfortunately, it wasn&amp;#8217;t working out great for me
(but maybe something has changed in recent years).
Another solution is to use password-less keys,
but &lt;strong&gt;&lt;em&gt;you don&amp;#8217;t want to do that, right?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thankfully we can use Windows built-in SSH agent
to remember passwords for us even in WSL.&lt;a class="footnote-ref" id="_footnoteref_4" href="#_footnote_4" title="View footnote 4" role="doc-noteref"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To do that, we have to tell WSL Git to use SSH binary from Windows:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global core.sshcommand '/mnt/c/Windows/System32/OpenSSH/ssh.exe'&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_credential_settings"&gt;Credential settings&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_credential_helper"&gt;&lt;code&gt;credential.helper&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;This is quite similar to &lt;code&gt;core.sshcommand&lt;/code&gt; I mentioned above when using Git in WSL.
You can choose to use HTTPS over SSH when talking with Git remotes.
But WSL doesn&amp;#8217;t have a built-in way to store these credentials,
and using plaintext file &lt;code&gt;.git-credentials&lt;/code&gt; is not something you want to be doing.&lt;/p&gt;
&lt;p&gt;Again, Windows comes to the rescue.
Here, you have to install Git on Windows
to be able to use its credential manager from WSL Git.
Then, you can authenticate once,
usually via a browser window,
and &lt;em&gt;Git will remember this&lt;/em&gt;.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global credential.helper '/mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager.exe'&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure to quote the path
as space in &lt;code&gt;Program Files&lt;/code&gt; would cause some issues otherwise.
And use the actual path of where you have Git for Windows installed,
other default alternative is &lt;code&gt;AppData&lt;/code&gt; of your Windows user.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_git_features"&gt;Git features&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_feature_manyfiles"&gt;&lt;code&gt;feature.manyFiles&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Git introduced this feature a few years ago to improve support for bigger repos.
I naively enabled it after reading the change log
and it instantly broke some tools for me,
particularly Matlab Git integration was completely broken.
After these experiences I disabled this feature,
so my setting repeats the current default.&lt;a class="footnote-ref" id="_footnoteref_5" href="#_footnote_5" title="View footnote 5" role="doc-noteref"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global feature.manyFiles false&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#8217;re struggling with Git performance you might consider to enable it.
Hopefully after a few years tools already support it.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_git_commit"&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_commit_verbose"&gt;&lt;code&gt;commit.verbose&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; has a &lt;code&gt;--verbose&lt;/code&gt; flag
which includes committed diff in a commit window.
The commit windows is nothing more but an automatically opened file
which you edit, save, and quit,
which makes git do the commit.&lt;/p&gt;
&lt;p&gt;This option always adds this flag,
so you can see what are you committing every time.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global commit.verbose true&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_git_fetch"&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_fetch_prune"&gt;&lt;code&gt;fetch.prune&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;You can remove any remote-tracking references
(i.e. &lt;code&gt;origin/&amp;lt;branch-name&amp;gt;&lt;/code&gt;)
which were removed on the remote with &lt;code&gt;git fetch --prune&lt;/code&gt;.
I find it very convenient to be the default,
as branches are usually removed after merging pull request,
so you can quickly have a lot of dangling references.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global fetch.prune true&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have multiple remotes,
and would like to prune references from only some of them,
it&amp;#8217;s also an option.
For that, there is another command:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global remote.&amp;lt;name&amp;gt;.prune true&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; can be anything,
and by convention &lt;code&gt;origin&lt;/code&gt; is used as the default remote name.&lt;/p&gt;
&lt;p&gt;You might be wondering if setting something like
&lt;code&gt;git config --global remote.prune true&lt;/code&gt; is allowed.
Yes, it is, and it does pretty much the same thing
as setting &lt;code&gt;fetch.prune&lt;/code&gt; to true.&lt;a class="footnote-ref" id="_footnoteref_6" href="#_footnote_6" title="View footnote 6" role="doc-noteref"&gt;[6]&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_git_pull"&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_pull_rebase"&gt;&lt;code&gt;pull.rebase&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;I like
&lt;a href="https://youtu.be/xN1-2p06Urc"&gt;explanation from this video&lt;/a&gt;
why default behavior of &lt;code&gt;git pull&lt;/code&gt; is a bit annoying.
Its title is a little bit clickbaitish,
but I agree with the arguments.&lt;/p&gt;
&lt;p&gt;I was also a bit surprised
that author didn&amp;#8217;t mentioned option we&amp;#8217;re talking about here.
To do &lt;code&gt;git pull --rebase&lt;/code&gt; automatically with each pull set:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global pull.rebase true&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_pull_ff_only"&gt;&lt;code&gt;pull.ff only&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;There is also another option
which enforces &lt;a href="https://graphite.dev/guides/git-config-ff-only"&gt;fast-forward merge in git pull&lt;/a&gt;.
The difference is that &lt;code&gt;--ff-only&lt;/code&gt; merge works
only if there are no newer commits coming from the remote.
Otherwise it fails,
and you have to do something with it manually.
That means you are forced to do the rebase on your own.&lt;/p&gt;
&lt;p&gt;This adds you more work
but one can advocate that it&amp;#8217;s safer,
as you have to explicitly rebase to the new version.&lt;/p&gt;
&lt;p&gt;This is in line with the approach &lt;strong&gt;never use git pull&lt;/strong&gt;
(i.e. &lt;strong&gt;use git fetch and git rebase instead&lt;/strong&gt;).
If you&amp;#8217;re into that,
consider using this option.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_git_merge"&gt;&lt;code&gt;git merge&lt;/code&gt;&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_merge_conflictstyle"&gt;&lt;code&gt;merge.conflictstyle&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;I think I don&amp;#8217;t know a person who likes to solve merge conflicts.
But I noticed that many people are more scared about them
then they probably should be.&lt;/p&gt;
&lt;p&gt;Setting a better conflict style in Git
is one of the steps to make them less scary.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zdiff3&lt;/code&gt; is a relatively new conflict style in Git
which was introduced in 2022 with version 2.35.
That means that you still can work with systems
which don&amp;#8217;t have this feature,
so make sure to see if your Git version is new enough.&lt;/p&gt;
&lt;p&gt;But what is &lt;code&gt;zdiff3&lt;/code&gt;?
It&amp;#8217;s an updated version of &lt;code&gt;diff3&lt;/code&gt;
which is much older algorithm&lt;a class="footnote-ref" id="_footnoteref_7" href="#_footnote_7" title="View footnote 7" role="doc-noteref"&gt;[7]&lt;/a&gt;
and which has one big benefit:
in classic conflict view you see two versions of the code,
&lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt;, as Git labels it.
&lt;code&gt;diff3&lt;/code&gt; also shows what was &lt;em&gt;before that&lt;/em&gt;,
which we can name a common ancestor of both commits.&lt;a class="footnote-ref" id="_footnoteref_8" href="#_footnote_8" title="View footnote 8" role="doc-noteref"&gt;[8]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This simple addition often adds much needed context,
to solve merge conflict faster, and do it correctly.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;diff3&lt;/code&gt; isn&amp;#8217;t ideal,
and sometimes creates more noisy conflicts,
marking more lines as conflicting.&lt;a class="footnote-ref" id="_footnoteref_9" href="#_footnote_9" title="View footnote 9" role="doc-noteref"&gt;[9]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zdiff3&lt;/code&gt; addresses these issues.
Interestingly enough, &lt;code&gt;z&lt;/code&gt; in the name comes from the word &lt;em&gt;zealous&lt;/em&gt;.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global merge.conflictstyle zdiff3&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_git_init"&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_init_defaultbranch"&gt;&lt;code&gt;init.defaultBranch&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Like it or not, but &lt;code&gt;main&lt;/code&gt; is the new &lt;code&gt;master&lt;/code&gt; in Git,
and it doesn&amp;#8217;t seem to be changing any time soon.&lt;/p&gt;
&lt;p&gt;Git though still uses default &lt;code&gt;master&lt;/code&gt;, so this option has to be set.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global init.defaultBranch main&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_git_aliases"&gt;Git aliases&lt;/h2&gt;&lt;section class="doc-section level-2"&gt;&lt;h3 id="_git_git"&gt;&lt;code&gt;git git&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;I borrowed that idea from Anthony Sottile&lt;a class="footnote-ref" id="_footnoteref_10" href="#_footnote_10" title="View footnote 10" role="doc-noteref"&gt;[10]&lt;/a&gt;.
It allows you to type &lt;code&gt;git git &amp;lt;command&amp;gt;&lt;/code&gt;
and make the command still work.
In fact, you might type as many &lt;code&gt;git&lt;/code&gt; commands as you like,
as it&amp;#8217;s recursive.&lt;/p&gt;
&lt;p&gt;Why? Same as Anthony,
I sometimes type &lt;code&gt;git&lt;/code&gt; in the terminal,
then start thinking about something,
then and go back to typing,
often typing &lt;code&gt;git&lt;/code&gt; again due to muscle memory.
Adding an alias is simpler than fighting with it, apparently ðŸ˜›&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global alias.git '!git'&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_git_l"&gt;&lt;code&gt;git l&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Quickly output oneline log for all branches.
Very handy to quickly orient around in the repo.
This is one of my most-used git commands.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global alias.l 'log --graph --all --oneline'&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_git_lg"&gt;&lt;code&gt;git lg&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git l&lt;/code&gt; with a bit more details.
It uses more formatting and
I copied it from someone&amp;#8217;s dotfiles years ago.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global alias.lg "log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%cr)%C(reset) %C(white)%s%C(reset) %C(bold yellow)- %cn%C(reset)%C(bold red)%d%C(reset)' --abbrev-commit --date=relative"&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_git_llg"&gt;&lt;code&gt;git llg&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Even more detailed log.
Also copied from that same person.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global alias.llg "log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%cD%C(reset) %C(bold green)(%cr)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(bold yellow)- %cn%C(reset)' --abbrev-commit"&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_git_k"&gt;&lt;code&gt;git k&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;You migth not know this,
but Git comes with a GUI called &lt;code&gt;gitk&lt;/code&gt;.
It isn&amp;#8217;t always installed (e.g. MacOS Git via homebrew),
but when you have it,
it might be handy in some cases.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m used to Git commits starting with &lt;code&gt;git &amp;lt;cmd&amp;gt;&lt;/code&gt;,
so I added an alias which reflects it.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global alias.k '!gitk &amp;amp;'&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_git_ka"&gt;&lt;code&gt;git ka&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Another &lt;code&gt;gitk&lt;/code&gt; alias to run the program with &lt;code&gt;--all&lt;/code&gt; flag
which then shows all branches.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global alias.ka '!gitk --all &amp;amp;'&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class="footnotes" aria-label="Footnotes" role="doc-endnotes"&gt;&lt;hr&gt;&lt;ol class="footnotes"&gt;&lt;li class="footnote" id="_footnote_1" role="doc-endnote"&gt;I recommend a &lt;a href="https://youtu.be/TtiBhktB4Qg"&gt;video from Scott Hanselman&lt;/a&gt; if you want to learn more about this topic &lt;a class="footnote-backref" href="#_footnoteref_1" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_2" role="doc-endnote"&gt;&lt;code&gt;pre-commit&lt;/code&gt; with its &lt;a href="https://github.com/pre-commit/pre-commit-hooks/tree/429455474be018c8f085ae7d312432ab4154d5a2?tab=readme-ov-file#mixed-line-ending"&gt;&lt;code&gt;mixed-line-ending&lt;/code&gt; hook&lt;/a&gt; set to &lt;code&gt;lf&lt;/code&gt; is a great tool for that &lt;a class="footnote-backref" href="#_footnoteref_2" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_3" role="doc-endnote"&gt;&lt;code&gt;pre-commit&lt;/code&gt; mentioned above is a great way to do this. Also make sure to set up it to check it with each new commit or these &lt;code&gt;CRLF&lt;/code&gt; files might start reappearing, as we live in a society &lt;a class="footnote-backref" href="#_footnoteref_3" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_4" role="doc-endnote"&gt;Refer to &lt;a href="https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement"&gt;MS docs&lt;/a&gt; on how to enable SSH agent &lt;a class="footnote-backref" href="#_footnoteref_4" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_5" role="doc-endnote"&gt;When writing this post, I did some research, and it seems that this might be due to &lt;code&gt;libgit2&lt;/code&gt; incomparability with &lt;code&gt;manyFiles&lt;/code&gt;. More details &lt;a href="https://stackoverflow.com/a/77290211/14458327"&gt;on Stack Overflow&lt;/a&gt; &lt;a class="footnote-backref" href="#_footnoteref_5" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_6" role="doc-endnote"&gt;There is quite a good summary of the topic &lt;a href="https://stackoverflow.com/a/40842589"&gt;again on SO&lt;/a&gt; &lt;a class="footnote-backref" href="#_footnoteref_6" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_7" role="doc-endnote"&gt;Introduced in 2007 with Git 1.5.0 &lt;a class="footnote-backref" href="#_footnoteref_7" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_8" role="doc-endnote"&gt;A pretty nice explanation of that is &lt;a href="https://blog.nilbus.com/take-the-pain-out-of-git-conflict-resolution-use-diff3"&gt;in this blog post&lt;/a&gt; &lt;a class="footnote-backref" href="#_footnoteref_8" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_9" role="doc-endnote"&gt;Again, &lt;a href="https://stackoverflow.com/a/71254097/14458327"&gt;SO for the rescue&lt;/a&gt; &lt;a class="footnote-backref" href="#_footnoteref_9" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_10" role="doc-endnote"&gt;Here&amp;#8217;s his video about it: &lt;a class="bare" href="https://youtu.be/BkUW2NgfZao"&gt;https://youtu.be/BkUW2NgfZao&lt;/a&gt; &lt;a class="footnote-backref" href="#_footnoteref_10" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="git"></category></entry><entry><title>Convert dvdsub into srt subtitles</title><link href="https://tpwo.github.io/blog/2025/05/30/convert-dvdsub-into-srt-subtitles" rel="alternate"></link><published>2025-05-30T22:56:00+02:00</published><updated>2025-05-30T22:56:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2025-05-30:/blog/2025/05/30/convert-dvdsub-into-srt-subtitles</id><summary type="html">How to convert bitmap subtitles into text format</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I wanted to extract subtitles from a bunch of &lt;code&gt;.mp4&lt;/code&gt; files,
as they were containing song names playing in the background of the movie.&lt;/p&gt;
&lt;p&gt;This was more complicated than I thought.&lt;/p&gt;
&lt;p&gt;It turns out video subtitles can come in very different formats.
One of them is &lt;code&gt;dvdsub&lt;/code&gt;, and it&amp;#8217;s a bitmap subtitle format.&lt;/p&gt;
&lt;p&gt;To convert it into something you can grep,
you have to go through a lot of steps including OCR.&lt;/p&gt;
&lt;p&gt;Fortunately, good people created tools to do just that.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_ffmpeg_for_the_win"&gt;ffmpeg for the win&lt;/h2&gt;&lt;p&gt;I loved &lt;code&gt;ffmpeg&lt;/code&gt; once I discovered it many years ago.
I really don&amp;#8217;t like bloated constrained GUI-based apps
to manipulate video and audio files.&lt;/p&gt;
&lt;p&gt;It can help with subtitles as well.&lt;/p&gt;
&lt;p&gt;To install on MacOS you can use homebrew:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew install ffmpeg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Linux it should be available in your package manager.
On Windows probably the best solution is to use
&lt;a href="https://learn.microsoft.com/en-us/windows/wsl/install"&gt;WSL2&lt;/a&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_check_your_subs"&gt;Check your subs&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; can help you verifying that your subs are actually in &lt;code&gt;dvdsub&lt;/code&gt; format.
Use &lt;code&gt;-i&lt;/code&gt; and point to the video file:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ffmpeg -i &amp;lt;video-file&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;ffmpeg -i video.mp4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output should look like this:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;&amp;lt;...snip...&amp;gt;
Stream #0:0[0x1](eng): Video: mpeg4 (Simple Profile) (mp4v / 0x7634706D), yuv420p, 448x336 [SAR 1:1 DAR 4:3], 825 kb/s, 29.97 fps, 29.97 tbr, 30k tbn (default)
      Metadata:
        creation_time   : 2007-09-27T17:47:49.000000Z
        handler_name    : Video Media Handler
        vendor_id       : [0][0][0][0]
  Stream #0:1[0x2](eng): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 74 kb/s (default)
      Metadata:
        creation_time   : 2007-09-27T17:47:49.000000Z
        handler_name    : Sound Media Handler
        vendor_id       : [0][0][0][0]
  Stream #0:2[0x3](eng): Subtitle: dvd_subtitle (dvdsub) (mp4s / 0x7334706D), 720x480, 0 kb/s (default)
      Metadata:
        creation_time   : 2007-09-27T17:47:57.000000Z
        handler_name    : Unspecified
At least one output file must be specified&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The part we&amp;#8217;re interested in is
&lt;code&gt;Subtitle: dvd_subtitle (dvdsub)&lt;/code&gt;.
This confirms that our subtitles are bitmap-based,
and are one of the three streams in the file.&lt;/p&gt;
&lt;p&gt;Indexing is 0-based with a number after &lt;code&gt;Stream #&lt;/code&gt;,
i.e. &lt;code&gt;0:2&lt;/code&gt; in case of subtitle stream.&lt;/p&gt;
&lt;p&gt;Stream index is required in the next step.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_extract_subs_into_separate_container"&gt;Extract subs into separate container&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; comes in handy again:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ffmpeg -i &amp;lt;video-file&amp;gt; -map &amp;lt;stream-index&amp;gt; -c:s copy &amp;lt;output-file&amp;gt;.mkv&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ffmpeg -i video.mp4 -map 0:2 -c:s copy output.mkv&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_convert_mkv_into_sub_and_idx_files"&gt;Convert &lt;code&gt;mkv&lt;/code&gt; into &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;idx&lt;/code&gt; files&lt;/h2&gt;&lt;p&gt;This step requires mkvextract.
Again, you can install it with homebrew:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew install mkvtoolnix&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;code&gt;mkvextract&lt;/code&gt; should be available.
You can use it to create &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;idx&lt;/code&gt; file from &lt;code&gt;mkv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;mkvextract tracks &amp;lt;output-file&amp;gt;.mkv 0:&amp;lt;output-file&amp;gt;.sub&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;mkvextract tracks output.mkv 0:output.sub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We do it because OCR tools support this format instead of &lt;code&gt;mkv&lt;/code&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_use_ocr_to_get_srt_file"&gt;Use OCR to get &lt;code&gt;srt&lt;/code&gt; file&lt;/h2&gt;&lt;p&gt;This step took me the most, as the tool we&amp;#8217;re using here is pretty old,
and I had to manually clone repo and tweak it to be able to compile it.&lt;/p&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_install_vobsub2srt"&gt;Install &lt;code&gt;VobSub2SRT&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;You can use my fork, so you don&amp;#8217;t have to apply the fix by yourself.
The "fix" was bumping the minimum required version of &lt;code&gt;cmake&lt;/code&gt; which I did in
&lt;a href="https://github.com/tpwo/VobSub2SRT/commit/cd391e43cfc13df9fc54a58246664bb3c42b481a"&gt;this one-liner&lt;/a&gt;.&lt;/p&gt;
&lt;section class="doc-section level-3"&gt;&lt;h4 id="_use_my_homebrew_tap"&gt;Use my homebrew tap&lt;/h4&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;Remember that you probably shouldn&amp;#8217;t just trust me
and run these commands below without checking the source code first ðŸ˜‰&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;I was able to set up a private homebrew tap,
so it&amp;#8217;s possible to install my fixed version with these two commands.
Homebrew will take care of build dependencies
(or at least for &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;tesseract&lt;/code&gt;):&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew tap tpwo/vobsub2srt
brew install --HEAD tpwo/vobsub2srt/vobsub2srt&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setting this up was new for me.
It turns out that Homebrew requires
&lt;code&gt;&amp;lt;user&amp;gt;/homebrew-&amp;lt;name&amp;gt;&lt;/code&gt; repo to be present,
so I &lt;a href="https://github.com/tpwo/homebrew-vobsub2srt"&gt;created it&lt;/a&gt;.
This repo contains the
&lt;a href="https://github.com/tpwo/homebrew-vobsub2srt/blob/main/Formula/vobsub2srt.rb"&gt;formula&lt;/a&gt;
to install VobSub2SRT
from &lt;a href="https://github.com/tpwo/VobSub2SRT"&gt;my fork&lt;/a&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-3"&gt;&lt;h4 id="_manual_installation"&gt;Manual installation&lt;/h4&gt;&lt;p&gt;If you prefer manual installation, it&amp;#8217;s also possible.
Before compilation, you have to install build dependencies:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;brew install cmake
brew install tesseract&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can clone my fork and compile the tool:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="bash"&gt;git clone https://github.com/tpwo/VobSub2SRT
&lt;span class="nb"&gt;cd &lt;/span&gt;VobSub2SRT

&lt;span class="c"&gt;# Then you can follow original README&lt;/span&gt;
./configure
make

&lt;span class="c"&gt;# `vobsub2srt` should be present in `build/bin`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Original README suggests &lt;code&gt;sudo make install&lt;/code&gt;,
but I just grabbed the compiled binary and moved it to my PATH in &lt;code&gt;~/.local/bin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then you can finally convert &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;idx&lt;/code&gt; file into &lt;code&gt;srt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;# Note we don't pass file extension here
vobsub2srt &amp;lt;output-file&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;vobsub2srt output&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_script_to_run_it_all_with_one_command"&gt;Script to run it all with one command&lt;/h2&gt;&lt;p&gt;I had a bunch videos with embedded subtitles,
so I created a Bash script to quickly run it with &lt;code&gt;for f in *&lt;/code&gt;:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="bash"&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;title_wo_suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nv"&gt;outdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;music

&lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;ffmpeg &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 2&amp;gt;&amp;amp;1 | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'dvdsub'&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt; &lt;span class="s1"&gt;'[#\[]'&lt;/span&gt; &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$stream&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'No subtitles track in the video!'&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi

&lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

ffmpeg &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-map&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$stream&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;:s copy &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;.mkv

mkvextract tracks &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;.mkv 0:&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;.sub

vobsub2srt &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$outdir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title_wo_suffix&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run it, save it under &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;,
do &lt;code&gt;chmod +x &amp;lt;name&amp;gt;&lt;/code&gt;,
and run:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;./&amp;lt;name&amp;gt; &amp;lt;video-file&amp;gt;.&amp;lt;ext&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g. &lt;code&gt;./extract-subs video.mp4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To run it for e.g. all &lt;code&gt;.mp4&lt;/code&gt; files in the current folder do:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;for f in *.mp4; do ./extract-subs.sh "$f"; done&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_sources_and_further_reading"&gt;Sources and further reading&lt;/h2&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;Original VobSub2SRT repo (I forked a fork!):&lt;br&gt;
&lt;a class="bare" href="https://github.com/ruediger/VobSub2SRT"&gt;https://github.com/ruediger/VobSub2SRT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Tutorial describing alternative flow with &lt;code&gt;ffmes&lt;/code&gt;. I figured VobSub2SRT is easier to run on Apple Sillcon Macbook:&lt;br&gt;
&lt;a class="bare" href="https://subarashii-no-fansub.github.io/Subbing-Tutorial/Convert-vobsub-file-into-srt/"&gt;https://subarashii-no-fansub.github.io/Subbing-Tutorial/Convert-vobsub-file-into-srt/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="video"></category></entry><entry><title>Use SSH key to sign your Git commits</title><link href="https://tpwo.github.io/blog/2025/05/30/use-ssh-key-to-sign-your-git-commits" rel="alternate"></link><published>2025-05-30T21:33:00+02:00</published><updated>2025-05-30T21:33:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2025-05-30:/blog/2025/05/30/use-ssh-key-to-sign-your-git-commits</id><summary type="html">How to sign commits without using GPG</summary><content type="html">&lt;section class="doc-section level-1"&gt;&lt;h2 id="_but_why"&gt;But why?&lt;/h2&gt;&lt;p&gt;You might wonder why should you sign your commits.
This is a valid question, and some people just don&amp;#8217;t care about it.
If you don&amp;#8217;t have a ready opinion&lt;a class="footnote-ref" id="_footnoteref_1" href="#_footnote_1" title="View footnote 1" role="doc-noteref"&gt;[1]&lt;/a&gt;, I&amp;#8217;ll try to convince you.&lt;/p&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_choose_your_warrior_committer"&gt;Choose your &lt;s&gt;warrior&lt;/s&gt; committer&lt;/h3&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;Yes, I know that author and committer are two different things in Git,
but you can fabricate both of them pretty much the same way.&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;In Git you can assign any author to any commit.
This is a basic functionality of Git,
you can put any name and email in &lt;code&gt;.gitconfig&lt;/code&gt;
or pass one-time name/email with &lt;code&gt;-C&lt;/code&gt; when committing
(or set ENV variables etc.&amp;#8201;&amp;#8211;&amp;#8201;there are many ways).&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_make_github_to_link_their_profile"&gt;Make GitHub to link their profile&lt;/h3&gt;&lt;p&gt;Then, you can push this commit to GitHub.
If the commit email address is already used by someone on GitHub,
GitHub links it with their profile.
Even if this is obviously not their commit.
GitHub cannot know this.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_fork_their_repo_and_display_fabricated_commit_from_the_base_url"&gt;Fork their repo and display fabricated commit from the base URL&lt;/h3&gt;&lt;p&gt;You might think that no one cares about you
doing some fake commits in your repos.
But you can fork any repo and fake commits in the fork.&lt;/p&gt;
&lt;p&gt;Then, you can display a commit from fork
even when looking at it from the original repo.
Actually, this is a big problem with GitHub UI,
as it treats all forks to be connected with the base repo.&lt;/p&gt;
&lt;p&gt;I once found a fabricated Linus Torvalds commit
in which he deleted the whole
&lt;a href="https://github.com/torvalds/linux"&gt;Linux codebase&lt;/a&gt;
with a funny commit message.&lt;/p&gt;
&lt;p&gt;Unfortunately, I haven&amp;#8217;t found it now but
&lt;a href="https://github.com/Amog-OS/AmogOS/commit/4f503a0"&gt;here&amp;#8217;s something similar&lt;/a&gt;
(also from Torvalds!).&lt;/p&gt;
&lt;p&gt;TLDR: fabrication process is simple:&lt;/p&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;&lt;li&gt;Fork a repo&lt;/li&gt;&lt;li&gt;Create a fake commit.&lt;/li&gt;&lt;li&gt;Display it in context of the original repo. &lt;strong&gt;GitHub allows for that!&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_what_can_i_do"&gt;What can I do?&lt;/h3&gt;&lt;p&gt;You cannot prevent people from using your (public) email
and fabricate commits on your account.
But you can turn on GitHub &lt;strong&gt;vigilant mode&lt;/strong&gt; which is described in
&lt;a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/displaying-verification-statuses-for-all-of-your-commits"&gt;their docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then all of your unsigned commits will be marked explicitly as unverified.
Unfortunately, also all of &lt;strong&gt;your own&lt;/strong&gt; commits,
prior you started to sign them, will be marked as well.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_old_times"&gt;Old times&lt;/h2&gt;&lt;p&gt;Nevermind, let&amp;#8217;s go back to the original topic.&lt;/p&gt;
&lt;p&gt;By the end of 2021 with v2.34.0
Git added a way to sign your commits using SSH keys.
Before then, only GPG could be used for that,
and using GPG is a lot of pain.&lt;/p&gt;
&lt;p&gt;I tried switching to SSH a few years ago but it didn&amp;#8217;t work,
and quick research showed that I&amp;#8217;m not the only one.&lt;/p&gt;
&lt;p&gt;Out of curiosity I checked it now,
and I was able to sign my commits after a few minutes of configuration.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_configure_git"&gt;Configure Git&lt;/h2&gt;&lt;p&gt;I assume that you already have and use a password-protected SSH key&lt;a class="footnote-ref" id="_footnoteref_2" href="#_footnote_2" title="View footnote 2" role="doc-noteref"&gt;[2]&lt;/a&gt;.
Then you can tell Git to use it:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global gpg.format ssh
git config --global user.signingkey ~/.ssh/&amp;lt;your-public-key&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;#8217;s all!
To sign a single commit:&lt;/p&gt;
&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;while doing research you might also encounter sign-off
which is a different thing in Git, and is not backed by by any encryption&lt;a class="footnote-ref" id="_footnoteref_3" href="#_footnote_3" title="View footnote 3" role="doc-noteref"&gt;[3]&lt;/a&gt;.&lt;/p&gt;&lt;/aside&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git commit -S -m 'Your commit message'&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To always sign your commits:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global commit.gpgsign true&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To also always sign your tags:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global tag.gpgsign true&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_configure_github"&gt;Configure GitHub&lt;/h2&gt;&lt;p&gt;To have commits marked as signed in GitHub,
you have to add SSH key one more time,
and choose it to be your &lt;strong&gt;Signing Key&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/use-ssh-key-to-sign-your-git-commits/add-new-ssh-key.png" alt="Add new SSH signing key in GitHub"&gt;&lt;/div&gt;
&lt;p&gt;After doing that,
your signed commits will be marked as &lt;strong&gt;Verified&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/use-ssh-key-to-sign-your-git-commits/commit-sign.png" alt="Commit signed with SSH key as displayed in GitHub"&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_local_signers_file"&gt;Local signers file&lt;/h2&gt;&lt;p&gt;You can also create an allowed signers file
for quick local verification of signatures&lt;/p&gt;
&lt;p&gt;Create a file (e.g., &lt;code&gt;~/.config/git/allowed_signers&lt;/code&gt;)
listing trusted email and public key pairs in this format:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;your.email@example.com ssh-ed25519 AAAAC3NzaC1...&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then tell Git to use it:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;git config --global gpg.ssh.allowedSignersFile '~/.config/git/allowed_signers'&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now verify if your commit was signed properly:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;$ git verify-commit &amp;lt;hash&amp;gt;
Good "git" signature for your.email@example.com with ED25519 key SHA256:&amp;lt;...snip...&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can do it for git log as well:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;$ git log --show-signature
commit &amp;lt;hash&amp;gt; (HEAD -&amp;gt; main, origin/main)
Good "git" signature for your.email@example.com with ED25519 key SHA256:&amp;lt;...snip...&amp;gt;
Author: John Doe &amp;lt;your.email@example.com&amp;gt;
Date:   Fri May 30 21:22:36 2025 +0200

    Hello there&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_further_reading"&gt;Further reading&lt;/h2&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;How to do it on Windows:&lt;br&gt;
&lt;a class="bare" href="https://www.meziantou.net/signing-commits-in-git-using-ssh-keys-on-windows.htm"&gt;https://www.meziantou.net/signing-commits-in-git-using-ssh-keys-on-windows.htm&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/section&gt;&lt;section class="footnotes" aria-label="Footnotes" role="doc-endnotes"&gt;&lt;hr&gt;&lt;ol class="footnotes"&gt;&lt;li class="footnote" id="_footnote_1" role="doc-endnote"&gt;I don&amp;#8217;t want to go into details, but e.g. &lt;a href="https://withblue.ink/2020/05/17/how-and-why-to-sign-git-commits.html"&gt;this blog post&lt;/a&gt; does it ery well &lt;a class="footnote-backref" href="#_footnoteref_1" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_2" role="doc-endnote"&gt;If you don&amp;#8217;t have your SSH key set up, &lt;a href="https://www.git-tower.com/blog/setting-up-ssh-for-commit-signing"&gt;this blog post&lt;/a&gt; will be helpful. They go into much more details along with tips how to load SSH keys into keychain on MacOS etc. &lt;a class="footnote-backref" href="#_footnoteref_2" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li class="footnote" id="_footnote_3" role="doc-endnote"&gt;&lt;a href="https://youtu.be/6hu3cbBhHqQ"&gt;This video&lt;/a&gt; shows different ways to sign a Git commit. Also, author clearly states that he doesn&amp;#8217;t sign his commits, so you clearly see that opinions vary on this topic. &lt;a class="footnote-backref" href="#_footnoteref_3" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="git"></category></entry><entry><title>Clipboard sync between WSL Neovim and Windows</title><link href="https://tpwo.github.io/blog/2024/09/17/clipboard-sync-between-wsl-neovim-and-windows" rel="alternate"></link><published>2024-09-17T21:52:00+02:00</published><updated>2024-09-17T21:52:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-09-17:/blog/2024/09/17/clipboard-sync-between-wsl-neovim-and-windows</id><summary type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I recently started migration from Vim to Neovim.
One of the first issues was proper configuration of clipboard.
By &lt;em&gt;proper â€¦&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I recently started migration from Vim to Neovim.
One of the first issues was proper configuration of clipboard.
By &lt;em&gt;proper&lt;/em&gt;, I mean a situation
where I have a working 2-way-sync clipboard
between Neovim running in tmux in WSL in Windows Terminal and Windows,
so I can easily copy and paste
from my browser or any other program to and from Neovim.&lt;/p&gt;
&lt;p&gt;With Vim I intially achieved that with &lt;a href="https://github.com/Opticos/GWSL-Source"&gt;GWSL&lt;/a&gt;
and configured &lt;code&gt;$DISPLAY&lt;/code&gt; env variable
which was a quite complex and unstable solution
(GWSL sometimes has weird issues).
Thankfully, it was needed only on older versions of Windows 10
(my &lt;code&gt;$CURRENT_COMPANY&lt;/code&gt; still uses the old Win10 version though&amp;#8230;&amp;#8203;).
Up-to-date Windows 10 and Windows 11
support clipboard sync for Vim out of the box.
They have something like GWSL built-in,
and surprisingly it&amp;#8217;s quite stable and just works.
Bravo Microsoft ðŸ˜›&lt;/p&gt;
&lt;p&gt;The only caveat is to install Vim version which has clipboard support&amp;#8201;&amp;#8211;&amp;#8201;usually &lt;code&gt;vim-gtk&lt;/code&gt; is recommended on Debian/Ubuntu.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_the_unexpected"&gt;The unexpected&lt;/h2&gt;&lt;p&gt;I was a bit surprised to find out
that this doesn&amp;#8217;t work with Neovim.&lt;/p&gt;
&lt;p&gt;Some googling brought the solution: &lt;code&gt;win32yank&lt;/code&gt;.
This is a small Rust program
which integrates with Windows cliboard,
providing an interface which can be easily used by Neovim.&lt;/p&gt;
&lt;p&gt;Actually, Neovim has built-in support for it.
You just need to make sure that &lt;code&gt;win32yank.exe&lt;/code&gt; is on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_how_to_get_win32yank_exe"&gt;How to get &lt;code&gt;win32yank.exe&lt;/code&gt;?&lt;/h2&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;If, from any reason, you don&amp;#8217;t want Neovim on Windows,
you can download only the &lt;code&gt;win32yank.exe&lt;/code&gt; file.
E.g. by doing &lt;code&gt;winget install win32yank&lt;/code&gt;.
Just make sure to use the correct path to the &lt;code&gt;exe&lt;/code&gt; file.&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;I use WSL to do most of my text editting,
but I still find it useful to have the same editor on Windows itself.&lt;/p&gt;
&lt;p&gt;You can install it most easily with
&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/winget/"&gt;winget&lt;/a&gt;,
i.e. &lt;code&gt;winget install Neovim.Neovim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why this it important?
It turns out that Neovim on Windows is shipped with &lt;code&gt;win32yank&lt;/code&gt;!&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_creating_symlink"&gt;Creating symlink&lt;/h2&gt;&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;I noticed that Neovim has issues
if I copy the Windows exectuable directly to WSL drive.
That&amp;#8217;s why you probably should create a symlink,
even if you download only the binary.&lt;/p&gt;&lt;/aside&gt;
&lt;p&gt;&lt;code&gt;winget&lt;/code&gt; installs Neovim in &lt;code&gt;Program Files&lt;/code&gt;,
and &lt;code&gt;win32yank.exe&lt;/code&gt; is located in the &lt;code&gt;bin&lt;/code&gt; subfolder.
Use this command to create a symlink in your home folder,
so Neovim can see it.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;ln --symbolic /mnt/c/Program\ Files/Neovim/bin/win32yank.exe ~/.local/bin/win32yank.exe&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, &lt;code&gt;~/.local/bin&lt;/code&gt; has to exist
and be in your &lt;code&gt;$PATH&lt;/code&gt; for this to work.&lt;/p&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="tips"></category><category term="vim"></category><category term="wsl"></category><category term="windows"></category></entry><entry><title>Playing Super Mario World in 2024</title><link href="https://tpwo.github.io/blog/2024/08/12/playing-super-mario-world-in-2024" rel="alternate"></link><published>2024-08-12T23:12:00+02:00</published><updated>2024-08-12T23:12:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-08-12:/blog/2024/08/12/playing-super-mario-world-in-2024</id><summary type="html">How to run it on modern platforms in widescreen mode</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;div class="quote-block"&gt;&lt;blockquote&gt;&lt;p&gt;Thank you Mario! But our princess is in another castle!&lt;/p&gt;&lt;footer&gt;&amp;#8212; &lt;cite&gt;&lt;a href="https://en.wikipedia.org/wiki/Our_princess_is_in_another_castle!"&gt;Toad&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Super_Mario_World"&gt;Super Mario World&lt;/a&gt;
is one of my childhood games I remember really well.
It was released in 1990 but recently I found out
that we can still play it today on modern platforms
with widescreen support enabled!&lt;/p&gt;
&lt;figure class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/cover.png" alt="Super Mario World Cover"&gt;
&lt;figcaption&gt;Cover of the US version of Super Mario World&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The base to do it is
&lt;a href="https://github.com/bsnes-emu/bsnes"&gt;bsnes&lt;/a&gt;,
a multi-platform SNES emulator.
There is a fork of it
which supports HD video features called
&lt;a href="https://github.com/DerKoun/bsnes-hd"&gt;bsnes-hd&lt;/a&gt;,
and we&amp;#8217;ll be using it.&lt;/p&gt;
&lt;p&gt;Super Mario World Widescreen project is a fan-made patch
which can be found in
&lt;a href="https://github.com/VitorVilela7/wide-snes"&gt;wide-snes&lt;/a&gt;
GitHub repo.&lt;/p&gt;
&lt;p&gt;We also need a patcher.
According to
&lt;a href="https://sneslab.net/wiki/How_to_apply_ROM_patches"&gt;sneslab.net manual&lt;/a&gt;
we can use either FLIPS or beam.
They host FLIPS directly on their site:
&lt;a class="bare" href="https://sneslab.net/tools/floating.zip"&gt;https://sneslab.net/tools/floating.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the only missing piece is ROM with the original game.
I found a copy of it on
&lt;a href="https://archive.org/details/super-mario-world-usa_20230925"&gt;archive.org&lt;/a&gt;
which seems to be a pretty reasonable source.
If it&amp;#8217;s there,
Nintendo probably doesn&amp;#8217;t have anything against it,
or at least no longer cares.&lt;/p&gt;
&lt;aside class="admonition-block note" role="note"&gt;&lt;h6 class="block-title label-only"&gt;&lt;span class="title-label"&gt;Note: &lt;/span&gt;&lt;/h6&gt;&lt;p&gt;Internet Archive hosts multiple files under the linked project,
but we care only about a zip which contains the &lt;code&gt;sfc&lt;/code&gt; file with the actual game.&lt;/p&gt;&lt;/aside&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_patching_the_rom"&gt;Patching the ROM&lt;/h2&gt;&lt;p&gt;After downloading the files,
you should have something like this
(we&amp;#8217;re skipping emulator for now):&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre&gt;â”œâ”€â”€ smw-widescreen.bps           &lt;b class="conum"&gt;1&lt;/b&gt;
â”œâ”€â”€ Super Mario World (USA).sfc  &lt;b class="conum"&gt;2&lt;/b&gt;
â””â”€â”€ floating
    â”œâ”€â”€ boring.zip
    â”œâ”€â”€ flips-linux
    â”œâ”€â”€ flips.exe                &lt;b class="conum"&gt;3&lt;/b&gt;
    â”œâ”€â”€ license.txt
    â””â”€â”€ src.zip&lt;/pre&gt;&lt;ol class="callout-list arabic"&gt;&lt;li&gt;Patch file&lt;/li&gt;&lt;li&gt;ROM file&lt;/li&gt;&lt;li&gt;FLIPS patcher&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Run FLIPS &amp;lt;3&amp;gt; and click &lt;code&gt;Apply Patch&lt;/code&gt;.
At first it asks you for the patch file,
then for the ROM file,
and then for the filename to save the patched ROM.&lt;/p&gt;
&lt;div class="image-block left"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/flips.png" alt="FLIPS patcher"&gt;&lt;/div&gt;
&lt;p&gt;You can notice that the patched file is twice the size of the original:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="shell"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;du&lt;/span&gt; &lt;span class="nt"&gt;-sh&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;
1.0M    Super Mario World &lt;span class="o"&gt;(&lt;/span&gt;USA&lt;span class="o"&gt;)&lt;/span&gt; Widescreen Project.sfc
512K    Super Mario World &lt;span class="o"&gt;(&lt;/span&gt;USA&lt;span class="o"&gt;)&lt;/span&gt;.sfc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_creating_widescreen_configuration_file"&gt;Creating widescreen configuration file&lt;/h2&gt;&lt;p&gt;&lt;code&gt;bsnes-hd&lt;/code&gt; requires a &lt;code&gt;bso&lt;/code&gt; configuration file
in order to correctly run the game in a widescreen mode.
Thankfully, you don&amp;#8217;t have to download it,
as the file is very short and simple,
and you can create it with this command:&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="shell"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'w1s1W48S2i0o1p1b1B1c1'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Super Mario World (USA) Widescreen Project.bso'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The content of the file is taken from
&lt;a href="https://github.com/VitorVilela7/wide-snes/blob/master/smw-widescreen.bso"&gt;wide-snes GitHub repo&lt;/a&gt;.
I guess it uses special quirky syntax to tell the emulator
how it should behave when dealing with the patched ROM.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_running_the_game"&gt;Running the game&lt;/h2&gt;&lt;p&gt;Now, you can unzip &lt;code&gt;bsnes-hd&lt;/code&gt; and run it.
To make the game look better,
&lt;strong&gt;make sure to select&lt;/strong&gt; &lt;code&gt;Settings &amp;gt; Shader &amp;gt; None&lt;/code&gt;.
By default it&amp;#8217;s set to &lt;code&gt;Blur&lt;/code&gt; which makes the game very&amp;#8230;&amp;#8203; well, blurry.
You can later switch these options on the fly,
maybe you&amp;#8217;ll like it.&lt;/p&gt;
&lt;p&gt;To start the game, either select &lt;code&gt;System &amp;gt; Load Game&lt;/code&gt; or drag
and drop patched &lt;code&gt;sfc&lt;/code&gt; file into the window.
Super Mario World should start in widescreen mode!&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/gameplay.png" alt="Super Mario World in widescreen mode"&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_configuring_controller"&gt;Configuring controller&lt;/h2&gt;&lt;p&gt;I found the game to be much more enjoyable while playing it with a game pad.
Fortunately, &lt;code&gt;bsnes&lt;/code&gt; allows for that.
Select &lt;code&gt;Settings &amp;gt; Input&lt;/code&gt; to configure mappings for your device.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m using Xbox 360 controller,
and it works like a charm.
Here are my settings:&lt;/p&gt;
&lt;div class="image-block"&gt;&lt;img src="https://tpwo.github.io/images/playing-super-mario-world-in-2024/gamepad-mapping.png" alt="Input settings for Xbox 360 controller"&gt;&lt;/div&gt;
&lt;p&gt;These are pretty much defaults,
as much as you can tell that about SNES &amp;#8594; Xbox 360 conversion,
but I added another mapping for &lt;code&gt;X&lt;/code&gt;
which is used to run faster in the game.&lt;/p&gt;&lt;/section&gt;</content><category term="posts"></category><category term="tech"></category><category term="gaming"></category></entry><entry><title>Python integration tests with pytest and docker compose</title><link href="https://tpwo.github.io/blog/2024/07/15/python-integration-tests-with-pytest-and-docker-compose" rel="alternate"></link><published>2024-07-15T22:48:00+02:00</published><updated>2024-07-15T22:48:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-07-15:/blog/2024/07/15/python-integration-tests-with-pytest-and-docker-compose</id><summary type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I really like
&lt;a href="https://docs.pytest.org/"&gt;pytest&lt;/a&gt;.
It&amp;#8217;s a great tool for writing unit tests in Python,
as it provides a lot â€¦&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;I really like
&lt;a href="https://docs.pytest.org/"&gt;pytest&lt;/a&gt;.
It&amp;#8217;s a great tool for writing unit tests in Python,
as it provides a lot of features out of the box.
Some of them are quite magical, but they can make your life much easier,
so at the end you need much less code.&lt;/p&gt;
&lt;p&gt;Recently, I experimented with using pytest fixture
to create a simple integration test skeleton which integrates docker.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_fixtures"&gt;Fixtures&lt;/h2&gt;&lt;p&gt;Fixtures in pytest are a way to request for something in the test code.
There are two basic types of fixtures.&lt;a class="footnote-ref" id="_footnoteref_1" href="#_footnote_1" title="View footnote 1" role="doc-noteref"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&lt;/code&gt; fixtures which provide a certain value or object&lt;ul&gt;&lt;li&gt;This means we execute some code before requesting a fixture&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;yield&lt;/code&gt; fixtures which provide a certain state&lt;ul&gt;&lt;li&gt;This means we execute some code before &lt;strong&gt;and after&lt;/strong&gt; requesting a fixture&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;In this case the latter is be needed,
as we want to perform the test in a state when docker container is running.
This way we can startup a docker container
and clean it up regardless of the test results.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m using &lt;code&gt;docker compose&lt;/code&gt;, as it provides more flexibility
and it&amp;#8217;s cleaner than CLI flags for pure &lt;code&gt;docker&lt;/code&gt;.
I&amp;#8217;d use it even when you have only a single container,
as overhead is minimal.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_implementation"&gt;Implementation&lt;/h2&gt;&lt;p&gt;You can see the test file skeleton here.&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="python"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tested_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="bp"&gt;...&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;docker_container&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;docker&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;compose&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--file&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;testing/docker-compose.yml&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;up&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--detach&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;docker&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;compose&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--file&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;testing/docker-compose.yml&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;down&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_integration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docker_container&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;tested_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sh"&gt;'&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;expected output&amp;gt;&lt;/span&gt;&lt;span class="sh"&gt;'&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flow is quite simple here:&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;test_integration&lt;/code&gt; function starts&lt;/li&gt;&lt;li&gt;It requests &lt;code&gt;docker_container&lt;/code&gt;, so the fixture function starts&lt;/li&gt;&lt;li&gt;We reach &lt;code&gt;yield&lt;/code&gt; in &lt;code&gt;docker_container&lt;/code&gt; and go back to the test function&lt;/li&gt;&lt;li&gt;&lt;code&gt;docker_container&lt;/code&gt; value in &lt;code&gt;test_integration&lt;/code&gt; is a return value of &lt;code&gt;subprocess.run&lt;/code&gt; from the fixture&lt;ul&gt;&lt;li&gt;I&amp;#8217;m not using it in this example&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Test code is run up to the end&lt;/li&gt;&lt;li&gt;Either if any exception is thrown or if the test code finished,
we go back to the fixture and execute rest of the code&lt;ul&gt;&lt;li&gt;In this case it&amp;#8217;s &lt;code&gt;docker compose down&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;The biggest drawback of this approach is &lt;code&gt;time.sleep&lt;/code&gt;,
as &lt;code&gt;out&lt;/code&gt; is returned when &lt;code&gt;docker compose up&lt;/code&gt; starts running,
and it doesn&amp;#8217;t mean that the container is ready for the test.
Depending on your use case you would need less or even more time here.&lt;/p&gt;
&lt;p&gt;A smarter approach would be getting the container notify the code
that it&amp;#8217;s ready in an event-driven fashion.
The presented solution is currently enough for my use case,
even though it might be quite limiting
if we want to scale it and run multiple test cases.&lt;/p&gt;
&lt;p&gt;But for my use case this was good enough,
so I stopped here,
and maybe I&amp;#8217;ll expand it in the future.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_integration"&gt;Integration&lt;/h2&gt;&lt;p&gt;By default pytest picks up all files which are named &lt;code&gt;test_*.py&lt;/code&gt; or &lt;code&gt;*_test.py&lt;/code&gt;.
As integration tests are quite longer than unit tests,
we don&amp;#8217;t want them to be run each time along with unit tests.&lt;/p&gt;
&lt;p&gt;I chose to rename the file with integration tests to &lt;code&gt;integration.py&lt;/code&gt;
which I put in &lt;code&gt;tests&lt;/code&gt; folder along with other test files.
This works fine on a small-scale project.
In a bigger project,
I&amp;#8217;d probably create a separate folder in &lt;code&gt;tests&lt;/code&gt;
or maybe create a new top level folder like &lt;code&gt;integration_tests&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the simple approach
running these tests is a simple &lt;code&gt;pytest tests/integration.py&lt;/code&gt;,
which I put under &lt;code&gt;Makefile&lt;/code&gt; target &lt;code&gt;integration-tests&lt;/code&gt;.
This way I can type &lt;code&gt;make i&lt;/code&gt; and let tab-completion do the rest for me.&lt;/p&gt;
&lt;p&gt;In CI, I&amp;#8217;m running them in the same job as unit tests, directly after them,
as I assume that it doesn&amp;#8217;t make sense to run costly integration tests
if any of my unit tests is failing (even if GitHub pays for my CI ðŸ˜›).&lt;/p&gt;
&lt;p&gt;You can see the actual implementation in my &lt;a href="https://github.com/tpwo/event-scrapper-srt/blob/1de160463e0c02c49efb6a932213cf75ea112a5e/tests/integration.py"&gt;event-scrapper-srt&lt;/a&gt; project.&lt;/p&gt;&lt;/section&gt;&lt;section class="footnotes" aria-label="Footnotes" role="doc-endnotes"&gt;&lt;hr&gt;&lt;ol class="footnotes"&gt;&lt;li class="footnote" id="_footnote_1" role="doc-endnote"&gt;To understand how they work &lt;a href="https://youtu.be/ScEQRKwUePI"&gt;here&amp;#8217;s a great video from Anthony Sottile about it&lt;/a&gt; &lt;a class="footnote-backref" href="#_footnoteref_1" role="doc-backlink" title="Jump to the first occurrence in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;</content><category term="tech"></category><category term="python"></category><category term="docker"></category><category term="testing"></category></entry><entry><title>Python debugging 101: pdb</title><link href="https://tpwo.github.io/blog/2024/06/19/python-debugging-101-pdb" rel="alternate"></link><published>2024-06-19T20:12:00+02:00</published><updated>2024-07-15T23:50:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-06-19:/blog/2024/06/19/python-debugging-101-pdb</id><summary type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;&lt;code&gt;pdb&lt;/code&gt; is a simple debugger that comes by default with Python.
There are many more advanced alternatives like &lt;code&gt;pudb&lt;/code&gt; or â€¦&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;section id="preamble" aria-label="Preamble"&gt;&lt;p&gt;&lt;code&gt;pdb&lt;/code&gt; is a simple debugger that comes by default with Python.
There are many more advanced alternatives like &lt;code&gt;pudb&lt;/code&gt; or &lt;code&gt;ipdb&lt;/code&gt;,
but &lt;code&gt;pdb&lt;/code&gt; is always available out of the box which is a big plus.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;breakpoint()&lt;/code&gt; was introduced in Python 3.7.
Before that,
import of &lt;code&gt;pdb&lt;/code&gt; and calling a function that creates a breakpoint was required.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_pdb_commands"&gt;&lt;code&gt;pdb&lt;/code&gt; commands&lt;/h2&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;h&lt;/code&gt; / &lt;code&gt;help&lt;/code&gt;&amp;#8201;&amp;#8211;&amp;#8201;display available commands&lt;/li&gt;&lt;li&gt;&lt;code&gt;c&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt;&amp;#8201;&amp;#8211;&amp;#8201;continue running the code until the end&lt;/li&gt;&lt;li&gt;&lt;code&gt;q&lt;/code&gt; / &lt;code&gt;quit&lt;/code&gt;&amp;#8201;&amp;#8211;&amp;#8201;quit program by raising &lt;code&gt;BdbQuit&lt;/code&gt; exception&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_l_list"&gt;&lt;code&gt;l&lt;/code&gt; / &lt;code&gt;list&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Prints lines of code around the line that is &lt;strong&gt;about to be run&lt;/strong&gt;
(marked with an arrow).
Pressing enter will list even more file.
&lt;code&gt;list .&lt;/code&gt; will reset the view to the original
(i.e. some lines before and after a line with arrow).&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_ll"&gt;&lt;code&gt;ll&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Long list, prints more lines of code.
Pressing enter has no effect.
There is no support for dot from this reason.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_w_where"&gt;&lt;code&gt;w&lt;/code&gt; / &lt;code&gt;where&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Displays a call stack that led to the execution of the given code.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_u_up_d_down"&gt;&lt;code&gt;u&lt;/code&gt; / &lt;code&gt;up&lt;/code&gt; &amp;amp; &lt;code&gt;d&lt;/code&gt; / &lt;code&gt;down&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Goes up or down one stack frame.
An arrow showed with &lt;code&gt;where&lt;/code&gt; is updated to account for the new position.
Also, &lt;code&gt;list&lt;/code&gt; will print the code around the current stack frame.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; accept step parameter,
e.g. &lt;code&gt;up 3&lt;/code&gt; will go up by three stack frames.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_p_pp"&gt;&lt;code&gt;p&lt;/code&gt; &amp;amp; &lt;code&gt;pp&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;For printing and pretty printing.
The latter is especially helpful when printing more complex data structures.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_n_next"&gt;&lt;code&gt;n&lt;/code&gt; / &lt;code&gt;next&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Goes to the next line.&lt;/p&gt;
&lt;p&gt;Whenever, a debugger returns it prints &lt;code&gt;--Return--&lt;/code&gt; to the screen,
and pauses right after the return value.
Pressing &lt;code&gt;n&lt;/code&gt; again will go to the next function.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_s_step"&gt;&lt;code&gt;s&lt;/code&gt; / &lt;code&gt;step&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Goes inside a function call.&lt;/p&gt;&lt;/section&gt;
&lt;section class="doc-section level-2"&gt;&lt;h3 id="_r_return"&gt;&lt;code&gt;r&lt;/code&gt; / &lt;code&gt;return&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Goes directly to the return statement of the current function.
Useful to quickly exit functions that we are not interested in debugging.&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class="doc-section level-1"&gt;&lt;h2 id="_summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;There are a lot of more features that can be used,
e.g. creating breakpoints from &lt;code&gt;pdb&lt;/code&gt;,
but above I described the basics that should be useful most of the time.&lt;/p&gt;
&lt;p&gt;For conditional breakpoints you can use Python &lt;code&gt;if&lt;/code&gt;
and hide breakpoint under a certain condition.&lt;/p&gt;
&lt;p&gt;I really recommend
&lt;a href="https://youtu.be/0LPuG825eAk"&gt;this video from Anthony Sottile&lt;/a&gt;
if you want to learn more and see how to use &lt;code&gt;pdb&lt;/code&gt; in practice.&lt;/p&gt;&lt;/section&gt;</content><category term="tech"></category><category term="python"></category><category term="tips"></category><category term="cli"></category></entry><entry><title>Xtract Ze Files!</title><link href="https://tpwo.github.io/blog/2024/06/19/xtract-ze-files" rel="alternate"></link><published>2024-06-19T19:45:00+02:00</published><updated>2024-06-19T19:45:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-06-19:/blog/2024/06/19/xtract-ze-files</id><summary type="html">&lt;p&gt;It&amp;#8217;s a neat way to remember &lt;code&gt;tar&lt;/code&gt; flags. &lt;mark&gt;X&lt;/mark&gt;tract &lt;mark&gt;Z&lt;/mark&gt;e &lt;mark&gt;F&lt;/mark&gt;iles!&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="bash"&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; &amp;lt;myarchive&amp;gt;.tar.gz â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s a neat way to remember &lt;code&gt;tar&lt;/code&gt; flags. &lt;mark&gt;X&lt;/mark&gt;tract &lt;mark&gt;Z&lt;/mark&gt;e &lt;mark&gt;F&lt;/mark&gt;iles!&lt;/p&gt;
&lt;div class="listing-block"&gt;&lt;pre class="rouge highlight"&gt;&lt;code data-lang="bash"&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; &amp;lt;myarchive&amp;gt;.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tech"></category><category term="tips"></category></entry><entry><title>Hello, World!</title><link href="https://tpwo.github.io/blog/2024/06/05/hello-world" rel="alternate"></link><published>2024-06-05T23:53:00+02:00</published><updated>2024-07-15T22:51:00+02:00</updated><author><name>tpwo</name></author><id>tag:tpwo.github.io,2024-06-05:/blog/2024/06/05/hello-world</id><summary type="html">&lt;p&gt;We&amp;#8217;re live!
I had an idea to create a personal blog for quite some time,
and here it is â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We&amp;#8217;re live!
I had an idea to create a personal blog for quite some time,
and here it is.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s still in a very WIP state,
as I connected all the wires to run it,
and didn&amp;#8217;t have much time to focus on
personalization, themes and other nice-to-eyes features.
But at first, I&amp;#8217;d like to add some content,
so I can see the impact of style changes on real posts.&lt;/p&gt;</content><category term="posts"></category></entry></feed>